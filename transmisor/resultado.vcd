$date
	Sun Jun 11 21:43:34 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench_TX $end
$var wire 3 ! xmit [2:0] $end
$var wire 10 " tx_code_group [9:0] $end
$var wire 1 # transmitting $end
$var wire 1 $ receiving $end
$var wire 1 % mr_main_reset $end
$var wire 1 & TX_ER $end
$var wire 1 ' TX_EN $end
$var wire 8 ( TXD [7:0] $end
$var wire 1 ) GTX_CLK $end
$var wire 1 * COL $end
$scope module TX $end
$var wire 3 + xmit [2:0] $end
$var wire 7 , tx_o_set [6:0] $end
$var wire 1 - tx_even $end
$var wire 10 . tx_code_group [9:0] $end
$var wire 1 # transmitting $end
$var wire 1 $ receiving $end
$var wire 1 % mr_main_reset $end
$var wire 1 / TX_OSET_indicate $end
$var wire 1 & TX_ER $end
$var wire 1 ' TX_EN $end
$var wire 8 0 TXD [7:0] $end
$var wire 1 ) GTX_CLK $end
$var wire 1 * COL $end
$scope module code_group $end
$var wire 7 1 tx_o_set [6:0] $end
$var wire 1 % mr_main_reset $end
$var wire 10 2 TXD_encoded [9:0] $end
$var wire 8 3 TXD [7:0] $end
$var wire 1 ) GTX_CLK $end
$var reg 1 / TX_OSET_indicate $end
$var reg 2 4 estado_actual [1:0] $end
$var reg 2 5 estado_siguiente [1:0] $end
$var reg 10 6 tx_code_group [9:0] $end
$var reg 1 - tx_even $end
$scope module data $end
$var wire 8 7 valid_cg_8b [7:0] $end
$var reg 10 8 valid_cg_10b [9:0] $end
$upscope $end
$upscope $end
$scope module ordered_set $end
$var wire 1 / TX_OSET_indicate $end
$var wire 1 - tx_even $end
$var wire 1 9 xmitCHANGE $end
$var wire 3 : xmit [2:0] $end
$var wire 9 ; tx_set_void [8:0] $end
$var wire 1 $ receiving $end
$var wire 1 % mr_main_reset $end
$var wire 1 & TX_ER $end
$var wire 1 ' TX_EN $end
$var wire 8 < TXD [7:0] $end
$var wire 1 ) GTX_CLK $end
$var reg 1 * COL $end
$var reg 8 = estado_actual [7:0] $end
$var reg 8 > estado_siguiente [7:0] $end
$var reg 1 # transmitting $end
$var reg 10 ? tx_code_group [9:0] $end
$var reg 7 @ tx_o_set [6:0] $end
$scope module void $end
$var wire 9 A tx_set_in [8:0] $end
$var wire 1 & TX_ER $end
$var wire 1 ' TX_EN $end
$var wire 8 B TXD [7:0] $end
$var reg 9 C tx_set_out [8:0] $end
$upscope $end
$scope module xmit_C $end
$var wire 3 D xmit [2:0] $end
$var wire 1 ) clk $end
$var reg 1 9 xmitCHANGE $end
$var reg 3 E xmit_old [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module probador $end
$var wire 1 * COL $end
$var wire 10 F tx_code_group [9:0] $end
$var reg 1 ) GTX_CLK $end
$var reg 8 G TXD [7:0] $end
$var reg 1 ' TX_EN $end
$var reg 1 & TX_ER $end
$var reg 1 % mr_main_reset $end
$var reg 1 $ receiving $end
$var reg 3 H xmit [2:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 H
b0 G
bx F
bx E
b1 D
b10000 C
b0 B
b10000 A
bx @
bx ?
b1 >
bx =
b0 <
b10000 ;
b1 :
19
b110001011 8
b0 7
bx 6
b1 5
bx 4
b0 3
b110001011 2
bx 1
b0 0
0/
bx .
x-
bx ,
b1 +
x*
0)
b0 (
0'
0&
0%
x$
x#
bx "
b1 !
$end
#1
09
b10 >
1/
b1 E
b1 =
b1 4
0*
0#
1)
#2
0)
1%
#3
b10 5
b1100000101 "
b1100000101 .
b1100000101 6
b1100000101 F
1-
0/
b1000 ,
b1000 1
b1000 @
b10 =
1)
#4
0)
#5
b1 5
b1001000101 "
b1001000101 .
b1001000101 6
b1001000101 F
1/
0-
b10 4
1)
#6
0)
#7
b10 5
b1100000101 "
b1100000101 .
b1100000101 6
b1100000101 F
1-
0/
b1 4
1)
#8
0)
#9
b1 5
b1001000101 "
b1001000101 .
b1001000101 6
b1001000101 F
1/
0-
b10 4
1)
#10
0)
#11
b10 5
b1100000101 "
b1100000101 .
b1100000101 6
b1100000101 F
1-
0/
b1 4
1)
#12
19
0)
b10 !
b10 +
b10 :
b10 D
b10 H
#13
b100 >
09
b1 5
b1001000101 "
b1001000101 .
b1001000101 6
b1001000101 F
1/
0-
b10 E
b10 4
1)
#14
0)
#15
b10 5
b1100000101 "
b1100000101 .
b1100000101 6
b1100000101 F
1-
0/
b1 4
b100 =
1)
#16
0)
#17
b1 5
b1001000101 "
b1001000101 .
b1001000101 6
b1001000101 F
1/
0-
b10 4
1)
#18
0)
#19
b10 5
b1100000101 "
b1100000101 .
b1100000101 6
b1100000101 F
1-
0/
b1 4
1)
#20
0)
#21
b1 5
b1001000101 "
b1001000101 .
b1001000101 6
b1001000101 F
1/
0-
b10 4
1)
#22
b1000 >
0)
1'
#23
b10010111 "
b10010111 .
b10010111 6
b10010111 F
1-
1/
b10000 >
x*
1#
b100000 ,
b100000 1
b100000 @
b1 4
b1000 =
1)
#24
0)
#25
b110001011 "
b110001011 .
b110001011 6
b110001011 F
0-
1/
b10000 ,
b10000 1
b10000 @
b10000 =
1)
#26
0)
#27
b1000101011 "
b1000101011 .
b1000101011 6
b1000101011 F
1-
1/
b1000101011 2
b1000101011 8
1)
b1 (
b1 0
b1 3
b1 7
b1 <
b1 B
b1 G
#28
0)
#29
b100101011 "
b100101011 .
b100101011 6
b100101011 F
0-
1/
b100101011 2
b100101011 8
1)
b10 (
b10 0
b10 3
b10 7
b10 <
b10 B
b10 G
#30
0)
#31
b1100010100 "
b1100010100 .
b1100010100 6
b1100010100 F
1-
1/
b1100010100 2
b1100010100 8
1)
b11 (
b11 0
b11 3
b11 7
b11 <
b11 B
b11 G
#32
0)
#33
b100100101 "
b100100101 .
b100100101 6
b100100101 F
0-
1/
b100100101 2
b100100101 8
1)
b1000010 (
b1000010 0
b1000010 3
b1000010 7
b1000010 <
b1000010 B
b1000010 G
#34
0)
#35
b1001000101 "
b1001000101 .
b1001000101 6
b1001000101 F
1-
1/
b1001000101 2
b1001000101 8
1)
b1010000 (
b1010000 0
b1010000 3
b1010000 7
b1010000 <
b1010000 B
b1010000 G
#36
0)
#37
b101100010 "
b101100010 .
b101100010 6
b101100010 F
0-
1/
b101100010 2
b101100010 8
1)
b10011010 (
b10011010 0
b10011010 3
b10011010 7
b10011010 <
b10011010 B
b10011010 G
#38
0)
#39
b110011010 "
b110011010 .
b110011010 6
b110011010 F
1-
1/
b110011010 2
b110011010 8
1)
b10100110 (
b10100110 0
b10100110 3
b10100110 7
b10100110 <
b10100110 B
b10100110 G
#40
0)
#41
b1010101010 "
b1010101010 .
b1010101010 6
b1010101010 F
0-
1/
b1010101010 2
b1010101010 8
1)
b10110101 (
b10110101 0
b10110101 3
b10110101 7
b10110101 <
b10110101 B
b10110101 G
#42
0)
#43
b1010010110 "
b1010010110 .
b1010010110 6
b1010010110 F
1-
1/
b1010010110 2
b1010010110 8
1)
b11000101 (
b11000101 0
b11000101 3
b11000101 7
b11000101 <
b11000101 B
b11000101 G
#44
0)
#45
b1100010100 "
b1100010100 .
b1100010100 6
b1100010100 F
0-
1/
b1100010100 2
b1100010100 8
1)
b11 (
b11 0
b11 3
b11 7
b11 <
b11 B
b11 G
#46
0)
#47
b1100001100 "
b1100001100 .
b1100001100 6
b1100001100 F
1-
1/
b1100001100 2
b1100001100 8
1)
b1111100 (
b1111100 0
b1111100 3
b1111100 7
b1111100 <
b1111100 B
b1111100 G
#48
0)
#49
b1100000101 "
b1100000101 .
b1100000101 6
b1100000101 F
0-
1/
b1100000101 2
b1100000101 8
1)
b10111100 (
b10111100 0
b10111100 3
b10111100 7
b10111100 <
b10111100 B
b10111100 G
#50
0)
#51
b10010111 "
b10010111 .
b10010111 6
b10010111 F
1-
1/
b10010111 2
b10010111 8
1)
b11111011 (
b11111011 0
b11111011 3
b11111011 7
b11111011 <
b11111011 B
b11111011 G
#52
0)
#53
0#
b100010111 "
b100010111 .
b100010111 6
b100010111 F
0-
1/
0*
b10 ,
b10 1
b10 @
b100000 =
b1000000 >
1)
0'
#54
0)
#55
b1010111 "
b1010111 .
b1010111 6
b1010111 F
1-
1/
b10000000 >
b100 ,
b100 1
b100 @
b1000000 =
1)
#56
0)
#57
b100 >
b10000000 =
1)
#58
0)
#59
b10 5
b1100000101 "
b1100000101 .
b1100000101 6
b1100000101 F
0/
b1000 ,
b1000 1
b1000 @
b100 =
1)
#60
0)
#61
b1 5
b1001000101 "
b1001000101 .
b1001000101 6
b1001000101 F
1/
0-
b10 4
1)
#62
0)
#63
b10 5
b1100000101 "
b1100000101 .
b1100000101 6
b1100000101 F
1-
0/
b1 4
1)
#64
0)
#65
b1 5
b1001000101 "
b1001000101 .
b1001000101 6
b1001000101 F
1/
0-
b10 4
1)
#66
0)
#67
b10 5
b1100000101 "
b1100000101 .
b1100000101 6
b1100000101 F
1-
0/
b1 4
1)
#68
0)
#69
b1 5
b1001000101 "
b1001000101 .
b1001000101 6
b1001000101 F
1/
0-
b10 4
1)
#70
0)
#71
b10 5
b1100000101 "
b1100000101 .
b1100000101 6
b1100000101 F
1-
0/
b1 4
1)
#72
0)
#73
b1 5
b1001000101 "
b1001000101 .
b1001000101 6
b1001000101 F
1/
0-
b10 4
1)
